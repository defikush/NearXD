@page "/fetchdata"
@using NearCompanion.Shared
@using System.Net
@using System.Text
@using Newtonsoft.Json
@using System.Collections.ObjectModel
@inject HttpClient Http

<PageTitle>Weather forecast</PageTitle>

<h1>Weather forecast</h1>

<p>This component demonstrates fetching data from the server.</p>

@if (blocks == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <div class="@GetClassName()">
        @foreach (var block in blocks)
        {
            var author = string.Empty;

            if (!string.IsNullOrEmpty(block.Author))
            {
                var split = block.Author.Split('.');

                if (split.Count() > 0)
                {
                    author = split[0];
                }
            } 

            author = string.IsNullOrEmpty(author) ? "unknown" : author;

            <div class="block" @key="block">
                <span> 
                    <p class="blockHeight">Block</p>
                    <button class="blockButton hoverableButton" type="button">@block.Height</button>
                </span>
                
                <div class="block-inner">
                    <div>
                        <p class="infoWords">@block.UtilizationPercentage% full</p>
                        <p class="infoWords">Duration: @(block.LengthMs / 1000f) s</p>
                    </div>

                    <div class="chunkContainer">
                        @foreach (var chunk in block.Chunks)
                        {
                            <button class="chunkButton hoverableButton" type="button">
                                <p class="chunkId">Chunk @chunk.ShardId</p>
                                <p class="chunkFullness">@chunk.UtilizationPercentage% full</p>
                            </button>
                        }
                    </div>
                </div>

                <span class="blockFooter"> 
                    <button class="authorButton hoverableButton" type="button">💼 @author</button>
                    <p class="footerWords">By</p>
                </span>
            </div>
        }
    </div>
}

@code 
{
    private List<BlockModel> blocks = new List<BlockModel>();

    private bool isInsertingNewBlock = false;
    string GetClassName() => isInsertingNewBlock ? "blocksContainer rightShift" : "blocksContainer";

    protected override async Task OnInitializedAsync()
    {
        var firstBlock = await Http.GetFromJsonAsync<Response<BlockModel>>("block");
        ulong previousHeight = firstBlock.Data.Height;
        blocks.Add(firstBlock.Data);
        previousHeight++;
        this.StateHasChanged();

        while (true)
        {
            var block = await Http.GetFromJsonAsync<Response<List<BlockModel>>>($"block/{previousHeight}");

            if (block.Data.Count != 0)
            {
                foreach (var newBlock in block.Data)
                {
                    Console.WriteLine("Handling new block...");
                    _ = AddBlockAndHandleAnimations(newBlock, (int)newBlock.LengthMs);
                    await Task.Delay((int)newBlock.LengthMs);
                    previousHeight++;
                }
            }
            else
            {
                await Task.Delay(1000);
            }
        }

        Console.WriteLine("Exited loop");
    }

    private async Task AddBlockAndHandleAnimations(BlockModel block, int duration)
    {
        isInsertingNewBlock = true;
        this.StateHasChanged();

        await Task.Delay(250);

        blocks.Add(block);
        this.StateHasChanged();
        isInsertingNewBlock = false;
        this.StateHasChanged();

        if (blocks.Count > 10)
        {
            blocks.RemoveAt(0);
            this.StateHasChanged();
        }
    }
}
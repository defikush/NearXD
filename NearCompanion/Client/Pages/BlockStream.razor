@page "/"
@using NearCompanion.Client.Services
@using NearCompanion.Client.Services.Interfaces
@using NearCompanion.Shared
@using NearCompanion.Client.Components
@using System.Net
@using System.Text
@using Newtonsoft.Json
@using System.Collections.ObjectModel
@using System.Collections.Specialized
@inject HttpClient Http
@inject IBlockService BlockService
@inject DialogService DialogService

<PageTitle>Weather forecast</PageTitle>

@if (blocks == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <div>
        <div class="container">
            <div class="row">
                <div class="col-sm-2">
                </div>

                <div class="col-sm-8 d-flex justify-content-center align-items-center">
                    <button @onclick="HandlePlayPause" 
                            id="stop-button" 
                            class="xd-button hoverableButton d-flex justify-content-center align-items-center">
                        @currentPlayPauseText
                    </button>
                </div>

                <div class="col-sm-2">
                </div>
            </div>
        </div>

        <div class="@GetClassName()">
            @foreach (var block in blocks)
            {
                <Block Model=block @key="block"/>
            }
        </div>
    </div>
}

@code 
{
    private List<BlockModel> blocks = new List<BlockModel>();
    private ObservableCollection<BlockModel> blocksQueue = new ObservableCollection<BlockModel>();

    private bool isInsertingNewBlock = false;
    string GetClassName() => isInsertingNewBlock ? "blocksContainer rightShift" : "blocksContainer";
    private bool isRunning = true;
    private const string STOP_TEXT = "⏸ Pause";
    private const string PLAY_TEXT = "▶ Resume";
    private string currentPlayPauseText = STOP_TEXT;
    private bool dequeuingBlocks = false;

    protected override async Task OnInitializedAsync()
    {
        blocksQueue.CollectionChanged += OnBlockQueueChanged; 
        BlockService.NewBlocksReceivedEvent += OnNewBlocksReceived;
        _ = BlockService.StartReceivingBlocks();
    }

    private void OnBlockQueueChanged(object? sender, NotifyCollectionChangedEventArgs e)
    {
        if (e.Action == NotifyCollectionChangedAction.Add && !dequeuingBlocks)
        {
            // start showing
            _ = DequeBlocks();
        }
    }

    private async Task DequeBlocks()
    {
        await Task.Run(async () =>
        {
            if (dequeuingBlocks)
            {
                return;
            }

            while (blocksQueue.Count > 0)
            {
                dequeuingBlocks = true;

                try
                {
                // Getting too behind
                if (blocksQueue.Count > 10)
                    {
                        lock (blocksQueue)
                        {
                            blocks.AddRange(blocksQueue.Take(9));

                            foreach (var block in blocksQueue.ToList().Take(9))
                            {
                                blocksQueue.Remove(block);
                            }
                        }

                        AnnounceStateHasChanged();

                        continue;
                    }
                }
                catch (Exception e)
                {
                    Console.WriteLine(e.ToString());
                }

                _ = AddBlockAndHandleAnimations(blocksQueue.First());
                await Task.Delay((int)blocksQueue.First().LengthMs - 100);

                lock (blocksQueue)
                {
                    blocksQueue.RemoveAt(0);
                }
            }

            dequeuingBlocks = false;

        });
    }

    private void OnNewBlocksReceived(object? sender, NewBlocksReceivedEventArgs e)
    {
        lock (blocksQueue)
        {
            if (blocks is null)
            {
                return;
            }

            foreach (var newBlock in e.Blocks)
            {
                blocksQueue.Add(newBlock);
            }
        }
    }

    private async Task AddBlockAndHandleAnimations(BlockModel block)
    {
        isInsertingNewBlock = true;
        AnnounceStateHasChanged();

        await Task.Delay(250);

        blocks.Add(block);
        isInsertingNewBlock = false;

        if (blocks.Count > 10)
        {
            blocks.RemoveRange(0, blocks.Count - 10);
        }

        AnnounceStateHasChanged();
    }

    private void HandlePlayPause()
    {
        isRunning = !isRunning;
        currentPlayPauseText = isRunning ? STOP_TEXT : PLAY_TEXT;
        StateHasChanged();
    }

    private void AnnounceStateHasChanged()
    {
        if (isRunning)
        {
            StateHasChanged();
        }
    }
}